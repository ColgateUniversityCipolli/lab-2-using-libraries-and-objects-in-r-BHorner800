\documentclass{article}
\usepackage{amsmath} %This allows me to use the align functionality.
                     %If you find yourself trying to replicate
                     %something you found online, ensure you're
                     %loading the necessary packages!
\usepackage{amsfonts}%Math font
\usepackage{graphicx}%For including graphics
\usepackage{hyperref}%For Hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\hypersetup{colorlinks = true,citecolor=black} %set citations to have black (not green) color
\usepackage{natbib}        %For the bibliography
\setlength{\bibsep}{0pt plus 0.3ex}
\bibliographystyle{apalike}%For the bibliography
\usepackage[margin=0.50in]{geometry}
\usepackage{float}
\usepackage{multicol}

%fix for figures
\usepackage{caption}
\newenvironment{Figure}
  {\par\medskip\noindent\minipage{\linewidth}}
  {\endminipage\par\medskip}
\begin{document}

\vspace{-1in}
\title{Lab 2 -- MATH 240 -- Computational Statistics}

\author{
  Ben Horner \\
  Colgate University  \\
  Math Department  \\
  {\tt bhorner@colgate.edu}
}

\date{Febuary 6, 2025}

\maketitle

\begin{multicols}{2}
\begin{abstract}

\end{abstract}

\noindent \textbf{Keywords:} Batch File, Data Processing, Music, JSON

\section{Introduction}
In 2018, two of Professor Cipolli's favorite bands - The Front Bottoms and Manchester Orchestra - released a song they collaborated on called Allen Town. In a statement to Noisey \citep{} -  the music arm of Vice - Andy Hull of Manchester Orchestra recalled that the creation of this track started when Nate Hussey of All Get Out sent him the first four lines of the track. Andy Hull worked out the melody and music and shared it with Brian Sella of The Front Bottoms, who then helped develop the chorus.

\textbf{This brings us to an interesting question:} which band contributed most to the song?
 
 
\subsection{Task}
  To attempt to answer this question, we first need to create a batch file for data processing, aiming to use Essentia - an open-source program for music analysis, description, and synthesis - to create data about what each band's tracks "sound like." In this Lab, we will begin by creating the code for building this batch file using a set of example .wav files. Then we will process the .JSON output and extract key descriptors.



\section{Methods}
We divide our overall goal in to two tasks. \textbf{Task 1}, where we build the batch files for data processing, and \textbf{Task 2}, where we process the data. For this Lab, we use test files created by Professor Cipolli located in a directory labeled "MUSIC." 


\subsection{Task 1: Building a Batch File for Data Processing}
To write the code to create the desired batch file, we will need to convert them from the format of \texttt{[track number]-[artist]-[track name].wav} to \texttt{[artist name]-[album name]-[track name].json}. 

\begin{enumerate}[1.]\itemsep0em
\item First, we install the \texttt{stringr} package for \texttt{R} \citep{}. We will be using it to split the file name apart to isolate the artist and album and to change the file to \texttt{.json}. 
<<eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
library(stringr)
@

\item Next, we isolate the subdirectories (artists and albums) and files (songs) within the \texttt{MUSIC} directory using the \texttt{list\_dirs, list\_files} and the \texttt{str\_count()} function to count the number of forward slashes.
<<eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
artist.dirs = c()
album.dirs = c()
for (directory in music.dirs){
  dir.level <- str_count(directory, pattern = "/")
  if (dir.level == 1){
  artist.dirs = append(artist.dirs, directory)
  }
  else if (dir.level == 2){
    album.dirs = append(album.dirs, directory)
  }
}
@

\item For each album, we isolated each \texttt{.wav} file using \texttt{str\_count()} to subset all \texttt{.wav} files from the current album subdirectory. For each file (song) we used \texttt{str\_split()} to extract just the track name, which we then pasted (\texttt{paste()} function) together with the artist name, track name, and .json to create an object of \texttt{[artist name]-[album name]-[track name].json}. We also pasted \texttt{streaming\_extractor\_music.exe} to the file name to create the command line prompt for the current track.
<<eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
json.files = c()
for (album in album.dirs){
  ###Splits the string of the directory into Music, Artist, Album
  split.string = str_split(album, pattern = "/", simplify = TRUE)
  album.name = split.string[1, 3]
  artist.name = split.string[1, 2]
  art.n.album = paste(artist.name, album.name, sep = "-") #artist and album
                                                          #comined in desired format

  ##Lists the music files in each album, goes through them, creates the final
  ##desired string of [artist name]-[album name]-[trackname].json
  music.files <- list.files(album)
  for (music.file in music.files){
    if (str_count(music.file, pattern = ".wav")){
      #Makes sure we are only dealing with .wav files
      file.path = str_split(music.file, pattern = ".wav", simplify =  TRUE)
      file.path = str_split(file.path, pattern = "-", simplify = TRUE)
      song.name = file.path[1, 3]
      final.path = paste(art.n.album, "-", song.name, ".json", sep = "")
      json.files = append(wav.files, final.path) #will contain all of the .wav files in all of the albums 
    }
  }
}

code.to.process = paste("streaming_extractor_music.exe ", json.files)

@

\item Finally, using the \texttt{writeLines()} function, we wrote the file names to a .txt file called batfile.txt.

<<eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
writeLines(code.to.process, "batfile.txt")
@
\end{enumerate}

\subsection{Task 2: Process JSON Output}
After being provided the .JSON output for the song "Au Revoir (Adios)," we analyze it for the key descriptors of \texttt{average\_loudness}, \texttt{mean} of \texttt{spectral\_energy, danceability, bpm, key\_key} (musical key) \texttt{key\_scale} (musical mode), and \texttt{length} (duration in seconds). We do this by installing the \texttt{jsonlite} package for \texttt{R} \citep{}, using \texttt{str\_split} to extract the artist, album, and track from the file name. And finally loading the JSON file into \texttt{R} via \texttt{fromJSON()}, before extracting the key descriptors.
<<eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
#Step 0
library(jsonlite)

#Step 1
json.file = (list.files())[8] 
#gives us the file we want. In the future, we can just loop through the .json
#files that we have in a list or folder
split.file = str_split(json.file, "-", simplify = TRUE)
artist.name = split.file[1, 1]
album = split.file[1, 2]
song.name = split.file[1, 3] #this still has .json on it
song.name = str_split(song.name, ".json", simplify = TRUE)[1,1]

#Step 2
json.data = fromJSON(json.file)

#Step 3
average.loudness = json.data$lowlevel$average_loudness
mean.spectral.enrgy = json.data$lowlevel$spectral_energy$mean
danceability = json.data$rhythm$danceability
bpm = json.data$rhythm$bpm
musical.key = json.data$tonal$key_key
musical.mode = json.data$tonal$key_scale
#duration = json.data ####in seconds, cant find in file
@


\section{Results}
To answer our question of which band contributed most to a song, we need to be able to analyze the data of the song to see what it "sounds like." Following this lab, we will be using Essentia to do this. Via our creation of the batch file and processing the .JSON output, we now have the code to turn other songs into Essentia ready file commands. For the already processed song "Au Revoir (Adios)", we now can examine key descriptors of it. 


\section{Discussion}
In this Lab, we laid the ground work for analyzing many more songs, as now we have the code to process them into .json files to be output and analyzed for key descriptors.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Bibliography
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\vspace{2em}

\noindent\textbf{Bibliography:} Note that when you add citations to your bib.bib file \emph{and}
you cite them in your document, the bibliography section will automatically populate here.

\begin{tiny}
\bibliography{bib}
\end{tiny}
\end{multicols}



\end{document}